version: 2.1
jobs:
  build:
    working_directory: ~/repo
    docker:
      - image: cimg/node:16.13.2
    steps:
      - checkout
      - run:
          name: Update NPM
          command: "sudo npm install -g npm"
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install Dependencies
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: Build React App
          command: npm run build
      - save_cache:
          key: app-build-cache-{{ .Branch }}
          paths:
            - ./build
      # - run:
      #     name: Deploy to Vercel
      #     command: ./node_modules/.bin/netlify deploy --site $NETLIFY_SITE_ID --auth $NETLIFY_ACCESS_TOKEN --prod --dir=build

    build_docker_image:
      working_directory: /app
      docker:
        - image: docker:17.05.0-ce-git
      steps:
        - checkout
        - setup_remote_docker
        - run:
            name: Install dependencies
            command: |
              apk add --no-cache \
                py-pip=9.0.0-r1
              pip install \
                docker-compose==1.12.0 \
                awscli==1.11.76
        - restore_cache:
            keys:
              - v1-{{ .Branch }}
            paths:
              - /caches/app.tar
        - run:
            name: Load Docker image layer cache
            command: |
              set +o pipefail
              docker load -i /caches/app.tar | true
        - run:
            name: Build application Docker image
            command: |
              docker build --cache-from=app -t app .
        - run:
            name: Save Docker image layer cache
            command: |
              mkdir -p /caches
              docker save -o /caches/app.tar app
        - save_cache:
            key: v1-{{ .Branch }}-{{ epoch }}
            paths:
              - /caches/app.tar
        - run:
            name: Run tests
            command: |
              docker-compose -f ./docker-compose.test.yml up
        - deploy:
            name: Push application Docker image
            command: |
              if [ "${CIRCLE_BRANCH}" == "master" ]; then
                login="$(aws ecr get-login)"
                ${login}
                docker tag app "${ECR_ENDPOINT}/app:${CIRCLE_SHA1}"
                docker push "${ECR_ENDPOINT}/app:${CIRCLE_SHA1}"
              fi

workflows:
  version: 2
  build-deploy:
    jobs:
      - build:
          filters:
            branches:
              only:
                - master

      - build_docker_image:
          filters:
            branches:
              only:
                - master